{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.10-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "11114112876699515044"
    }
  },
  "parameters": {
    "keyvaultName": {
      "type": "string",
      "metadata": {
        "description": "name of keyvault"
      }
    },
    "name": {
      "type": "string"
    },
    "expiration": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "ISO 8601 dateTime or duration: if set, will set expiration for the secret. supports both a duration and a specific time.\r\nDefault is never.\r\n"
      }
    },
    "notBefore": {
      "type": "string",
      "defaultValue": "[utcNow('u')]",
      "minLength": 3,
      "metadata": {
        "description": "ISO 8601 dateTime or duration: \r\nif set, will set 'not before' for the secret. supports both a duration and a specific time.\r\nDefault is now.\r\n"
      }
    },
    "enabled": {
      "type": "bool",
      "defaultValue": true
    },
    "value": {
      "type": "securestring"
    },
    "contentType": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "  what should the secret be identified as within keyvault? some content types will enable different features in keyvault. \r\n  optional, but highly recomended\r\n"
      }
    },
    "contentTypeTemplate": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "username",
        "password",
        "secret",
        "salt",
        "application/x-pkcs12",
        "connectionString"
      ],
      "metadata": {
        "description": "any template selected here will be used instead of param \"contentTypes\""
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Dont set. used as a base for figuring out ISO 8601 duration"
      }
    }
  },
  "variables": {
    "_exp": "[if(empty(parameters('expiration')), '', if(startsWith(toUpper(parameters('expiration')), 'P'), dateTimeAdd(parameters('baseTime'), parameters('expiration')), parameters('expiration')))]",
    "_nbf": "[if(startsWith(toUpper(parameters('notBefore')), 'P'), dateTimeAdd(parameters('baseTime'), parameters('notBefore')), parameters('notBefore'))]",
    "_contentType": "[if(empty(parameters('contentTypeTemplate')), string(parameters('contentType')), parameters('contentTypeTemplate'))]"
  },
  "resources": {
    "kv::secret": {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('name'))]",
      "properties": {
        "attributes": {
          "enabled": "[parameters('enabled')]",
          "exp": "[if(empty(variables('_exp')), null(), dateTimeToEpoch(variables('_exp')))]",
          "nbf": "[dateTimeToEpoch(variables('_nbf'))]"
        },
        "value": "[parameters('value')]",
        "contentType": "[variables('_contentType')]"
      }
    },
    "kv": {
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('keyvaultName')]"
    },
    "secret": {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyvaultName'), format('{0}-2', parameters('name')))]",
      "properties": {
        "contentType": "application/x-pkcs12"
      },
      "dependsOn": [
        "kv::secret"
      ]
    }
  },
  "outputs": {
    "iso": {
      "type": "string",
      "value": "[dateTimeAdd(parameters('baseTime'), 'P1Y')]"
    },
    "name": {
      "type": "string",
      "value": "[parameters('expiration')]"
    },
    "vault": {
      "type": "string",
      "value": "[parameters('keyvaultName')]"
    },
    "version": {
      "type": "string",
      "value": "[string(last(split(reference('kv::secret').secretUriWithVersion, '/')))]"
    },
    "ReferenceAsCs": {
      "type": "string",
      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyvaultName'), parameters('name'))]"
    },
    "ReferenceAsCsWithVersion": {
      "type": "string",
      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1};SecretVersion={2})', parameters('keyvaultName'), parameters('name'), last(split(reference('kv::secret').secretUriWithVersion, '/')))]"
    },
    "ReferenceAsUri": {
      "type": "string",
      "value": "[format('@Microsoft.KeyVault(SecretUri={0})', reference('kv::secret').secretUri)]"
    },
    "ReferenceAsUriWithVersion": {
      "type": "string",
      "value": "[format('@Microsoft.KeyVault(SecretUri={0})', reference('kv::secret').secretUriWithVersion)]"
    },
    "SecretUri": {
      "type": "string",
      "value": "[reference('kv::secret').secretUri]"
    },
    "SecretUriWithVersion": {
      "type": "string",
      "value": "[reference('kv::secret').secretUriWithVersion]"
    }
  }
}